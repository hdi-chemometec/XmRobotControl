'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MdnsBrowser;
exports.getKnownIps = getKnownIps;

var _mdnsJs = require('mdns-js');

var _mdnsJs2 = _interopRequireDefault(_mdnsJs);

var _keys = require('lodash/keys');

var _keys2 = _interopRequireDefault(_keys);

var _flatMap = require('lodash/flatMap');

var _flatMap2 = _interopRequireDefault(_flatMap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

monkeyPatchThrowers();
// mdns browser wrapper
function MdnsBrowser() {
  return _mdnsJs2.default.createBrowser(_mdnsJs2.default.tcp('http'));
}

function getKnownIps(maybeBrowser) {
  if (!maybeBrowser) return [];
  var browser = maybeBrowser;

  // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/2463
  return (0, _flatMap2.default)(browser.networking.connections, function (connection) {
    var _ref = browser.connections[connection.networkInterface] || {},
        addresses = _ref.addresses;

    return (0, _keys2.default)(addresses);
  });
}

function monkeyPatchThrowers() {
  // this method can throw (without emitting), so we need to patch this up
  var originalServiceTypeFromString = _mdnsJs.ServiceType.prototype.fromString;

  _mdnsJs.ServiceType.prototype.fromString = function () {
    try {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      originalServiceTypeFromString.apply(this, args);
    } catch (error) {
      console.warn(error);
    }
  };
}